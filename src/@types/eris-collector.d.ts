/** Declaration file generated by dts-gen */
/** i dont know how to do typings so sorry owo */
declare module 'eris-collector' {
  export class MessageCollector {
    constructor(...args: any[])

    collect(...args: any[]): void

    dispose(...args: any[]): void

    endReason(...args: any[]): void

    static captureRejectionSymbol: any

    static captureRejections: boolean

    static defaultMaxListeners: number

    static errorMonitor: any

    init(opts: any): void

    listenerCount(emitter: any, type: any): any

    on(emitter: any, event: any): any

    static once(emitter: any, name: any): any

    static usingDomains: boolean
  }

  export class ReactionCollector {
    constructor(...args: any[])

    collect(...args: any[]): void

    dispose(...args: any[]): void

    empty(...args: any[]): void

    endReason(...args: any[]): void

    static captureRejectionSymbol: any

    static captureRejections: boolean

    static defaultMaxListeners: number

    static errorMonitor: any

    static init(opts: any): void

    static key(...args: any[]): void

    static listenerCount(emitter: any, type: any): any

    on(emitter: any, event: any): any

    once(emitter: any, name: any): any

    static usingDomains: boolean
  }

  export namespace MessageCollector {
    class EventEmitter {
      constructor(opts: any)

      addListener(type: any, listener: any): any

      emit(type: any, args: any): any

      eventNames(): any

      getMaxListeners(): any

      listenerCount(type: any): any

      listeners(type: any): any

      off(type: any, listener: any): any

      on(type: any, listener: any): any

      once(type: any, listener: any): any

      prependListener(type: any, listener: any): any

      prependOnceListener(type: any, listener: any): any

      rawListeners(type: any): any

      removeAllListeners(type: any, ...args: any[]): any

      removeListener(type: any, listener: any): any

      setMaxListeners(n: any): any

      static EventEmitter: any

      static captureRejectionSymbol: any

      static captureRejections: boolean

      static defaultMaxListeners: number

      static errorMonitor: any

      static init(opts: any): void

      static listenerCount(emitter: any, type: any): any

      static on(emitter: any, event: any): any

      static once(emitter: any, name: any): any

      static usingDomains: boolean
    }
  }

  export namespace ReactionCollector {
    class EventEmitter {
      constructor(opts: any)

      addListener(type: any, listener: any): any

      emit(type: any, args: any): any

      eventNames(): any

      getMaxListeners(): any

      listenerCount(type: any): any

      listeners(type: any): any

      off(type: any, listener: any): any

      on(type: any, listener: any): any

      once(type: any, listener: any): any

      prependListener(type: any, listener: any): any

      prependOnceListener(type: any, listener: any): any

      rawListeners(type: any): any

      removeAllListeners(type: any, ...args: any[]): any

      removeListener(type: any, listener: any): any

      setMaxListeners(n: any): any

      static EventEmitter: any

      static captureRejectionSymbol: any

      static captureRejections: boolean

      static defaultMaxListeners: number

      static errorMonitor: any

      static init(opts: any): void

      static listenerCount(emitter: any, type: any): any

      static on(emitter: any, event: any): any

      static once(emitter: any, name: any): any

      static usingDomains: boolean
    }
  }
}
